import { HttpService } from '@nestjs/axios';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from '../database/prisma.service';
import { ScriptManagerService } from '../script-manager/script-manager.service';
import { TelephonyService } from '../telephony/telephony.service';
import { CallManagerService } from '../call-manager/call-manager.service';
import { InformationExtractionService } from '../information-extraction/information-extraction.service';
import { UnifiedWorkflowDto, WorkflowExecutionResponse } from './dto/unified-workflow.dto';
import { ScraperQuery, BusinessInfo, ScrapeResult } from './interfaces/scraper.interface';
export declare class WebScraperService {
    private readonly httpService;
    private readonly configService;
    private readonly prisma;
    private readonly scriptManager;
    private readonly telephonyService;
    private readonly callManager;
    private readonly informationExtraction;
    private readonly logger;
    private readonly requestDelays;
    private readonly maxRetries;
    private readonly baseDelay;
    private workflowStatuses;
    constructor(httpService: HttpService, configService: ConfigService, prisma: PrismaService, scriptManager: ScriptManagerService, telephonyService: TelephonyService, callManager: CallManagerService, informationExtraction: InformationExtractionService);
    scrapeBusinesses(query: ScraperQuery): Promise<ScrapeResult>;
    private scrapeDuckDuckGo;
    private scrapeGoogleSearch;
    private extractBusinessInfoFromUrl;
    private findPhoneNumber;
    private extractPhoneFromText;
    private isValidPhoneNumber;
    private normalizePhoneNumber;
    private findEmail;
    private extractEmailFromText;
    private findAddress;
    private isValidAddress;
    private findBusinessName;
    private findDescription;
    private findServices;
    private determineIndustry;
    private calculateConfidence;
    private isObviouslyNonBusiness;
    private isValidBusiness;
    private removeDuplicates;
    private saveBusinessesToDatabase;
    private respectRateLimit;
    private getMinDelayForDomain;
    private makeHttpRequest;
    private isRetryableError;
    private sleep;
    getStoredBusinesses(filters?: {
        industry?: string;
        location?: string;
        notCalledSince?: Date;
    }): Promise<BusinessInfo[]>;
    generateTestData(filters?: {
        industry?: string;
        location?: string;
    }): Promise<any>;
    enrichBusinessData(phoneNumber: string): Promise<BusinessInfo | null>;
    getBusinessesWithScripts(filters?: any): Promise<any[]>;
    assignScriptToBusiness(businessId: string, scriptId: string, customGoal?: string): Promise<any>;
    executeBulkCalls(bulkCallDto: any): Promise<any>;
    scrapeWithIntegratedWorkflow(query: ScraperQuery): Promise<any>;
    private generateGoalFromServices;
    private inferTargetPersonFromIndustry;
    startVerificationWorkflowForBusinesses(businessIds: string[], options: any): Promise<any>;
    executeCompleteWorkflow(workflowData: UnifiedWorkflowDto): Promise<WorkflowExecutionResponse>;
    private convertToScraperQuery;
    private scheduleBusinessCall;
    private processCallsInBackground;
    private buildWorkflowResponse;
    getWorkflowStatus(workflowId: string): Promise<any>;
    getWorkflowResults(workflowId: string): Promise<any>;
    private updateCallStatuses;
    getScriptById(scriptId: string): Promise<any>;
    getAllScripts(): Promise<any[]>;
    deleteBusiness(businessId: string): Promise<{
        message: string;
        deletedId: string;
    }>;
    private scrapeYellowPages;
    private scrapeYelp;
    private scrapeGoogleBusiness;
    private buildYellowPagesUrl;
    private buildYelpUrl;
    private buildGoogleBusinessUrl;
    private parseYellowPagesListing;
    private parseYelpListing;
    private parseGoogleBusinessListing;
    private isLikelyBusiness;
    private extractPhoneNumber;
}
