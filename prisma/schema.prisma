generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CallSession {
  id          String   @id @default(uuid())
  callSid     String   @unique
  phoneNumber String
  scriptId    String
  status      String
  startTime   DateTime @default(now())
  endTime     DateTime?
  duration    Int?
  recordingUrl String?
  outcome     Json?
  metadata    Json?
  
  transcript  Transcript[]
  ivrMap      IvrMap[]
  events      CallEvent[]
  extractedInformation ExtractedInformation[]
  
  script      Script   @relation(fields: [scriptId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([phoneNumber])
  @@index([status])
  @@index([startTime])
}

model Transcript {
  id          String   @id @default(uuid())
  callId      String
  timestamp   DateTime
  speaker     String   // 'agent', 'human', 'ivr'
  text        String
  confidence  Float?
  metadata    Json?
  
  call        CallSession @relation(fields: [callId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  @@index([callId])
  @@index([timestamp])
}

model IvrMap {
  id          String   @id @default(uuid())
  callId      String
  nodeId      String
  prompt      String
  options     Json     // Array of options
  selectedOption String?
  timestamp   DateTime
  parentId    String?
  metadata    Json?
  
  call        CallSession @relation(fields: [callId], references: [id], onDelete: Cascade)
  parent      IvrMap?  @relation("IvrMapHierarchy", fields: [parentId], references: [id])
  children    IvrMap[] @relation("IvrMapHierarchy")
  
  createdAt   DateTime @default(now())
  
  @@index([callId])
  @@index([parentId])
}

model Script {
  id          String   @id @default(uuid())
  name        String
  description String?
  goal        String
  context     String
  phases      Json     // Array of script phases
  adaptationRules Json // Array of adaptation rules
  isActive    Boolean  @default(true)
  
  calls       CallSession[]
  businesses  Business[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isActive])
}

model CallEvent {
  id          String   @id @default(uuid())
  callId      String
  eventType   String   // 'dtmf_sent', 'ivr_detected', 'decision_made', etc.
  eventData   Json
  timestamp   DateTime
  
  call        CallSession @relation(fields: [callId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  @@index([callId])
  @@index([eventType])
  @@index([timestamp])
}

model PhoneNumber {
  id          String   @id @default(uuid())
  number      String   @unique
  description String?
  ivrMapCache Json?    // Cached IVR structure for this number
  lastCalled  DateTime?
  callCount   Int      @default(0)
  metadata    Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([number])
}

model Business {
  id            String   @id @default(uuid())
  name          String
  website       String?  @unique
  phoneNumber   String?
  email         String?
  
  // Address information
  addressStreet String?
  addressCity   String?
  addressState  String?
  addressZip    String?
  addressCountry String?
  addressFormatted String?
  
  // Business details
  industry      String?
  description   String?  @db.Text
  services      String[] // Array of services offered
  businessHours Json?    // Operating hours
  
  // Script assignment
  assignedScriptId String?
  customGoal       String? // Override script goal with custom goal
  
  // Scraping metadata
  source        String   // Which source it came from (google, yelp, etc)
  confidence    Float    @default(0.5)
  lastScraped   DateTime @default(now())
  scrapeCount   Int      @default(1)
  
  // Call tracking
  lastCalled    DateTime?
  callCount     Int      @default(0)
  callOutcomes  Json?    // History of call outcomes
  callStatus    String   @default("pending") // pending, calling, completed, failed
  
  // Additional metadata
  metadata      Json?    // Any additional data
  
  assignedScript Script? @relation(fields: [assignedScriptId], references: [id])
  extractedInformation ExtractedInformation[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([website])
  @@index([phoneNumber])
  @@index([industry])
  @@index([addressState])
  @@index([lastCalled])
  @@index([assignedScriptId])
  @@index([callStatus])
}

model ExtractedInformation {
  id                    String   @id @default(uuid())
  businessId            String
  callId                String
  
  // Basic extraction info
  extractedAt           DateTime @default(now())
  extractionConfidence  Float
  rawTranscript         String   @db.Text
  
  // Contact information
  contactInfo           Json     // ContactInformation interface
  
  // Operational information  
  operationalInfo       Json     // OperationalInformation interface
  
  // Call outcome
  callOutcome           Json     // CallOutcome interface
  
  // Extraction metadata
  metadata              Json     // ExtractionMetadata interface
  
  // Quick search fields (denormalized for performance)
  targetPersonFound     Boolean  @default(false)
  targetPersonName      String?
  targetPersonPhone     String?
  targetPersonEmail     String?
  mainContactPhone      String?
  mainContactEmail      String?
  
  // Success indicators
  goalAchieved          Boolean  @default(false)
  informationQuality    String   @default("low") // low, medium, high
  followUpRequired      Boolean  @default(false)
  
  business              Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  call                  CallSession @relation(fields: [callId], references: [id], onDelete: Cascade)
  entities              InformationEntity[]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([businessId])
  @@index([callId])
  @@index([targetPersonFound])
  @@index([goalAchieved])
  @@index([informationQuality])
  @@index([extractedAt])
}

model InformationEntity {
  id            String   @id @default(uuid())
  extractionId  String
  
  // Entity details
  entityType    String   // 'person', 'phone', 'email', 'department', 'time', 'location'
  entityValue   String
  entityContext String?  // Where in the conversation this was mentioned
  confidence    Float    @default(0.5)
  
  // Entity metadata
  verified      Boolean  @default(false)
  category      String?  // 'primary_contact', 'alternative', 'department_head', etc.
  relationship  String?  // How this entity relates to others
  
  extraction    ExtractedInformation @relation(fields: [extractionId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  
  @@index([extractionId])
  @@index([entityType])
  @@index([entityValue])
  @@index([verified])
}